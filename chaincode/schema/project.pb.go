// Code generated by protoc-gen-go. DO NOT EDIT.
// source: project.proto

package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Project_State int32

const (
	Project_OPEN        Project_State = 0
	Project_IN_PROGRESS Project_State = 1
	Project_COMPLETED   Project_State = 2
	Project_CANCELED    Project_State = 3
)

var Project_State_name = map[int32]string{
	0: "OPEN",
	1: "IN_PROGRESS",
	2: "COMPLETED",
	3: "CANCELED",
}
var Project_State_value = map[string]int32{
	"OPEN":        0,
	"IN_PROGRESS": 1,
	"COMPLETED":   2,
	"CANCELED":    3,
}

func (x Project_State) String() string {
	return proto.EnumName(Project_State_name, int32(x))
}
func (Project_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

// Project state
type Project struct {
	// Composite key is defined by Issuer and Name
	Issuer string `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// List of IDs of applications for the project
	ApplicationsIds []string `protobuf:"bytes,3,rep,name=applicationsIds" json:"applicationsIds,omitempty"`
	// Identification of the project Assessor, can be the same as Issuer
	Assessor  string                     `protobuf:"bytes,4,opt,name=assessor" json:"assessor,omitempty"`
	OpenDate  *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=open_date,json=openDate" json:"open_date,omitempty"`
	StartDate *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	EndDate   *google_protobuf.Timestamp `protobuf:"bytes,7,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	// Estimated Project value in cents
	EstimatedValue uint64         `protobuf:"varint,8,opt,name=estimated_value,json=estimatedValue" json:"estimated_value,omitempty"`
	State          Project_State  `protobuf:"varint,9,opt,name=state,enum=io.github.tophatcroat.hlf_contrator.schema.Project_State" json:"state,omitempty"`
	Description    string         `protobuf:"bytes,10,opt,name=description" json:"description,omitempty"`
	Applications   []*Application `protobuf:"bytes,11,rep,name=applications" json:"applications,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Project) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetApplicationsIds() []string {
	if m != nil {
		return m.ApplicationsIds
	}
	return nil
}

func (m *Project) GetAssessor() string {
	if m != nil {
		return m.Assessor
	}
	return ""
}

func (m *Project) GetOpenDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.OpenDate
	}
	return nil
}

func (m *Project) GetStartDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *Project) GetEndDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *Project) GetEstimatedValue() uint64 {
	if m != nil {
		return m.EstimatedValue
	}
	return 0
}

func (m *Project) GetState() Project_State {
	if m != nil {
		return m.State
	}
	return Project_OPEN
}

func (m *Project) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Project) GetApplications() []*Application {
	if m != nil {
		return m.Applications
	}
	return nil
}

// ProjectId identifier part
type ProjectId struct {
	Issuer string `protobuf:"bytes,1,opt,name=issuer" json:"issuer,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *ProjectId) Reset()                    { *m = ProjectId{} }
func (m *ProjectId) String() string            { return proto.CompactTextString(m) }
func (*ProjectId) ProtoMessage()               {}
func (*ProjectId) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ProjectId) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *ProjectId) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// ProjectList list of projects
type ProjectList struct {
	Items []*Project `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ProjectList) Reset()                    { *m = ProjectList{} }
func (m *ProjectList) String() string            { return proto.CompactTextString(m) }
func (*ProjectList) ProtoMessage()               {}
func (*ProjectList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ProjectList) GetItems() []*Project {
	if m != nil {
		return m.Items
	}
	return nil
}

// PublishProject transaction payload and event
type PublishProject struct {
	Name           string                     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Assessor       string                     `protobuf:"bytes,3,opt,name=assessor" json:"assessor,omitempty"`
	StartDate      *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate" json:"start_date,omitempty"`
	EndDate        *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate" json:"end_date,omitempty"`
	EstimatedValue uint64                     `protobuf:"varint,6,opt,name=estimated_value,json=estimatedValue" json:"estimated_value,omitempty"`
	Description    string                     `protobuf:"bytes,7,opt,name=description" json:"description,omitempty"`
}

func (m *PublishProject) Reset()                    { *m = PublishProject{} }
func (m *PublishProject) String() string            { return proto.CompactTextString(m) }
func (*PublishProject) ProtoMessage()               {}
func (*PublishProject) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *PublishProject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PublishProject) GetAssessor() string {
	if m != nil {
		return m.Assessor
	}
	return ""
}

func (m *PublishProject) GetStartDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *PublishProject) GetEndDate() *google_protobuf.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *PublishProject) GetEstimatedValue() uint64 {
	if m != nil {
		return m.EstimatedValue
	}
	return 0
}

func (m *PublishProject) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*Project)(nil), "io.github.tophatcroat.hlf_contrator.schema.Project")
	proto.RegisterType((*ProjectId)(nil), "io.github.tophatcroat.hlf_contrator.schema.ProjectId")
	proto.RegisterType((*ProjectList)(nil), "io.github.tophatcroat.hlf_contrator.schema.ProjectList")
	proto.RegisterType((*PublishProject)(nil), "io.github.tophatcroat.hlf_contrator.schema.PublishProject")
	proto.RegisterEnum("io.github.tophatcroat.hlf_contrator.schema.Project_State", Project_State_name, Project_State_value)
}

func init() { proto.RegisterFile("project.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 563 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4f, 0x6f, 0xda, 0x30,
	0x18, 0xc6, 0x1b, 0x08, 0x90, 0xbc, 0xe9, 0x1f, 0xe6, 0xc3, 0x14, 0x71, 0x69, 0xc4, 0x65, 0xd1,
	0xa4, 0x26, 0x52, 0xab, 0xad, 0xea, 0x61, 0x9a, 0x28, 0x44, 0x13, 0x12, 0x03, 0x14, 0xaa, 0xa9,
	0xda, 0x0e, 0xc8, 0x24, 0x2e, 0x78, 0x4b, 0xe2, 0x28, 0x36, 0xed, 0x27, 0xda, 0xe7, 0xda, 0xb4,
	0x4f, 0x32, 0xc5, 0x09, 0x2c, 0xb4, 0x07, 0xda, 0xdd, 0xec, 0xd7, 0x7e, 0x9e, 0xbc, 0xcf, 0xeb,
	0x5f, 0xe0, 0x28, 0xcd, 0xd8, 0x77, 0x12, 0x08, 0x27, 0xcd, 0x98, 0x60, 0xe8, 0x2d, 0x65, 0xce,
	0x92, 0x8a, 0xd5, 0x7a, 0xe1, 0x08, 0x96, 0xae, 0xb0, 0x08, 0x32, 0x86, 0x85, 0xb3, 0x8a, 0xee,
	0xe6, 0x01, 0x4b, 0x44, 0x86, 0x05, 0xcb, 0x1c, 0x1e, 0xac, 0x48, 0x8c, 0x3b, 0xa7, 0x4b, 0xc6,
	0x96, 0x11, 0x71, 0xa5, 0x72, 0xb1, 0xbe, 0x73, 0x05, 0x8d, 0x09, 0x17, 0x38, 0x4e, 0x0b, 0xb3,
	0xce, 0xfb, 0xd2, 0x29, 0x60, 0xb1, 0x1b, 0x3f, 0x50, 0xf1, 0x83, 0x3d, 0xb8, 0x4b, 0x76, 0x26,
	0x0f, 0xcf, 0xee, 0x71, 0x44, 0xc3, 0xdc, 0x8e, 0xbb, 0xdb, 0x65, 0xa9, 0x7b, 0x85, 0xd3, 0x34,
	0xa2, 0x01, 0x16, 0x94, 0x25, 0x45, 0xa9, 0xfb, 0x5b, 0x85, 0xd6, 0xb4, 0xe8, 0x14, 0xbd, 0x86,
	0x26, 0xe5, 0x7c, 0x4d, 0x32, 0x53, 0xb1, 0x14, 0x5b, 0xf7, 0xcb, 0x1d, 0x42, 0xa0, 0x26, 0x38,
	0x26, 0x66, 0x4d, 0x56, 0xe5, 0x1a, 0xd9, 0x70, 0x52, 0x31, 0xe3, 0xc3, 0x90, 0x9b, 0x75, 0xab,
	0x6e, 0xeb, 0xfe, 0xe3, 0x32, 0xea, 0x80, 0x86, 0x39, 0x27, 0x9c, 0xb3, 0xcc, 0x54, 0xa5, 0xc3,
	0x76, 0x8f, 0x2e, 0x41, 0x67, 0x29, 0x49, 0xe6, 0x21, 0x16, 0xc4, 0x6c, 0x58, 0x8a, 0x6d, 0x9c,
	0x77, 0x9c, 0x22, 0xbd, 0xb3, 0x49, 0xef, 0xdc, 0x6c, 0xd2, 0xfb, 0x5a, 0x7e, 0x79, 0x80, 0x05,
	0x41, 0x57, 0x00, 0x5c, 0xe0, 0x4c, 0x14, 0xca, 0xe6, 0x5e, 0xa5, 0x2e, 0x6f, 0x4b, 0xe9, 0x3b,
	0xd0, 0x48, 0x12, 0x16, 0xc2, 0xd6, 0x5e, 0x61, 0x8b, 0x24, 0xa1, 0x94, 0xbd, 0x81, 0x13, 0xc2,
	0x05, 0x8d, 0xb1, 0x20, 0xe1, 0xfc, 0x1e, 0x47, 0x6b, 0x62, 0x6a, 0x96, 0x62, 0xab, 0xfe, 0xf1,
	0xb6, 0xfc, 0x25, 0xaf, 0xa2, 0x09, 0x34, 0xb8, 0xc8, 0xcd, 0x75, 0x4b, 0xb1, 0x8f, 0xcf, 0xaf,
	0x9c, 0xe7, 0xbf, 0xbc, 0x53, 0xbe, 0x84, 0x33, 0xcb, 0x0d, 0xfc, 0xc2, 0x07, 0x59, 0x60, 0x84,
	0x84, 0x07, 0x19, 0x4d, 0xf3, 0x99, 0x9a, 0x20, 0x67, 0x58, 0x2d, 0xa1, 0x6f, 0x70, 0x58, 0x9d,
	0xba, 0x69, 0x58, 0x75, 0xdb, 0x38, 0xbf, 0x7c, 0xc9, 0x97, 0x7b, 0xff, 0xf4, 0xfe, 0x8e, 0x59,
	0xf7, 0x23, 0x34, 0x64, 0x3b, 0x48, 0x03, 0x75, 0x32, 0xf5, 0xc6, 0xed, 0x03, 0x74, 0x02, 0xc6,
	0x70, 0x3c, 0x9f, 0xfa, 0x93, 0x4f, 0xbe, 0x37, 0x9b, 0xb5, 0x15, 0x74, 0x04, 0x7a, 0x7f, 0xf2,
	0x79, 0x3a, 0xf2, 0x6e, 0xbc, 0x41, 0xbb, 0x86, 0x0e, 0x41, 0xeb, 0xf7, 0xc6, 0x7d, 0x6f, 0xe4,
	0x0d, 0xda, 0xf5, 0xee, 0x25, 0xe8, 0x65, 0xae, 0x61, 0xf8, 0x12, 0xc6, 0xba, 0xb7, 0x60, 0x94,
	0xc2, 0x11, 0xe5, 0x02, 0x0d, 0xa1, 0x41, 0x05, 0x89, 0xb9, 0xa9, 0xc8, 0x78, 0x17, 0xff, 0x31,
	0x58, 0xbf, 0x70, 0xe8, 0xfe, 0xac, 0xc1, 0xf1, 0x74, 0xbd, 0x88, 0x28, 0x5f, 0x6d, 0xe0, 0xef,
	0x54, 0x1b, 0xb8, 0x6e, 0xfe, 0xf9, 0x75, 0x5a, 0xbb, 0x55, 0x4a, 0xd8, 0xab, 0x08, 0xd7, 0x1f,
	0x21, 0xdc, 0xdb, 0x21, 0x51, 0xdd, 0x07, 0x54, 0xe1, 0x6c, 0x29, 0x55, 0x22, 0x3f, 0x54, 0x88,
	0x6c, 0x3c, 0xdb, 0x60, 0x4b, 0xa6, 0xfb, 0x94, 0xcc, 0xfc, 0x87, 0x50, 0x8b, 0x9b, 0xed, 0x83,
	0x27, 0x84, 0xda, 0xbb, 0x40, 0xb5, 0x76, 0x12, 0x57, 0x8f, 0xae, 0xb5, 0xaf, 0xcd, 0x62, 0x80,
	0x8b, 0xa6, 0xec, 0xe4, 0xe2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x29, 0x41, 0xfb, 0x1d, 0xd7,
	0x04, 0x00, 0x00,
}
