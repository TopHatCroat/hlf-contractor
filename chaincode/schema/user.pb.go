// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/mwitkow/go-proto-validators"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User_State int32

const (
	User_VALID   User_State = 0
	User_BLOCKED User_State = 1
)

var User_State_name = map[int32]string{
	0: "VALID",
	1: "BLOCKED",
}
var User_State_value = map[string]int32{
	"VALID":   0,
	"BLOCKED": 1,
}

func (x User_State) String() string {
	return proto.EnumName(User_State_name, int32(x))
}
func (User_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

// User state
type User struct {
	Email   string     `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Name    string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Balance float64    `protobuf:"fixed64,3,opt,name=balance" json:"balance,omitempty"`
	State   User_State `protobuf:"varint,9,opt,name=state,enum=io.github.tophatcroat.hlf_contrator.schema.User_State" json:"state,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *User) GetState() User_State {
	if m != nil {
		return m.State
	}
	return User_VALID
}

// RegisterUser transaction payload and event
type RegisterUser struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *RegisterUser) Reset()                    { *m = RegisterUser{} }
func (m *RegisterUser) String() string            { return proto.CompactTextString(m) }
func (*RegisterUser) ProtoMessage()               {}
func (*RegisterUser) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *RegisterUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterUser) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *RegisterUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UserResponse struct {
	Email string     `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Name  string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	State User_State `protobuf:"varint,3,opt,name=state,enum=io.github.tophatcroat.hlf_contrator.schema.User_State" json:"state,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *UserResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserResponse) GetState() User_State {
	if m != nil {
		return m.State
	}
	return User_VALID
}

func init() {
	proto.RegisterType((*User)(nil), "io.github.tophatcroat.hlf_contrator.schema.User")
	proto.RegisterType((*RegisterUser)(nil), "io.github.tophatcroat.hlf_contrator.schema.RegisterUser")
	proto.RegisterType((*UserResponse)(nil), "io.github.tophatcroat.hlf_contrator.schema.UserResponse")
	proto.RegisterEnum("io.github.tophatcroat.hlf_contrator.schema.User_State", User_State_name, User_State_value)
}

func init() { proto.RegisterFile("user.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0xb6, 0x69, 0x9b, 0xb1, 0x4a, 0x59, 0x3c, 0x84, 0x5e, 0x5a, 0xa2, 0x87, 0x52,
	0xe8, 0x16, 0x14, 0x7a, 0xd6, 0x58, 0x0f, 0x62, 0x41, 0x88, 0x28, 0xe2, 0x41, 0xd9, 0xa6, 0x6b,
	0x13, 0x4c, 0x32, 0x61, 0x77, 0x6b, 0xdf, 0xc0, 0x77, 0xf2, 0x69, 0x0a, 0x7d, 0x12, 0xc9, 0xa6,
	0x0d, 0xf4, 0xa6, 0xe0, 0x6d, 0xfe, 0x7f, 0x26, 0x33, 0xf9, 0xfe, 0x05, 0x58, 0x2a, 0x21, 0x59,
	0x26, 0x51, 0x23, 0x1d, 0x44, 0xc8, 0x16, 0x91, 0x0e, 0x97, 0x33, 0xa6, 0x31, 0x0b, 0xb9, 0x0e,
	0x24, 0x72, 0xcd, 0xc2, 0xf8, 0xfd, 0x2d, 0xc0, 0x54, 0x4b, 0xae, 0x51, 0x32, 0x15, 0x84, 0x22,
	0xe1, 0x9d, 0xf1, 0x76, 0x30, 0xc0, 0x64, 0x94, 0xac, 0x22, 0xfd, 0x81, 0xab, 0xd1, 0x02, 0x87,
	0x66, 0xd1, 0xf0, 0x93, 0xc7, 0xd1, 0x3c, 0x9f, 0x56, 0xa3, 0xb2, 0x2c, 0x6e, 0xb8, 0xdf, 0x04,
	0x6a, 0x8f, 0x4a, 0x48, 0x7a, 0x02, 0x96, 0x48, 0x78, 0x14, 0x3b, 0xa4, 0x47, 0xfa, 0xb6, 0x5f,
	0x08, 0x4a, 0xa1, 0x96, 0xf2, 0x44, 0x38, 0x15, 0x63, 0x9a, 0x9a, 0x3a, 0xd0, 0x98, 0xf1, 0x98,
	0xa7, 0x81, 0x70, 0xaa, 0x3d, 0xd2, 0x27, 0xfe, 0x4e, 0xd2, 0x29, 0x58, 0x4a, 0x73, 0x2d, 0x1c,
	0xbb, 0x47, 0xfa, 0xc7, 0xe7, 0x63, 0xf6, 0x7b, 0x00, 0x96, 0xff, 0x04, 0x7b, 0xc8, 0xbf, 0xf6,
	0x8b, 0x25, 0x6e, 0x17, 0x2c, 0xa3, 0xa9, 0x0d, 0xd6, 0xd3, 0xd5, 0xf4, 0x76, 0xd2, 0x3e, 0xa0,
	0x87, 0xd0, 0xf0, 0xa6, 0xf7, 0xd7, 0x77, 0x37, 0x93, 0x36, 0x71, 0x15, 0xb4, 0x7c, 0xb1, 0x88,
	0x94, 0x16, 0xd2, 0x20, 0x9c, 0xee, 0x21, 0x78, 0x47, 0x9b, 0x75, 0xd7, 0x86, 0xc6, 0x2b, 0x1b,
	0x5c, 0xb2, 0xc1, 0xd9, 0x8e, 0xc8, 0x85, 0x66, 0xc6, 0x95, 0x5a, 0xa1, 0x9c, 0x17, 0x54, 0x5e,
	0x7d, 0xb3, 0xee, 0x56, 0x9e, 0x89, 0x5f, 0xfa, 0xb4, 0xb3, 0xa5, 0xae, 0xee, 0xf5, 0x8d, 0xe7,
	0x7e, 0x11, 0x68, 0xe5, 0xd7, 0x7c, 0xa1, 0x32, 0x4c, 0x95, 0xf8, 0x43, 0x70, 0x65, 0x3c, 0xd5,
	0x7f, 0x88, 0xc7, 0x6b, 0xbe, 0xd4, 0x8b, 0xde, 0xac, 0x6e, 0x9e, 0xf2, 0xe2, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x94, 0xfc, 0xd8, 0x35, 0x3c, 0x02, 0x00, 0x00,
}
